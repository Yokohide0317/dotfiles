
ARCH=$(uname -m)
echo "Current Architecture: $ARCH"
HOMEBREW="/usr/local/bin/brew"
MHOMEBREW="/opt/homebrew/bin/brew"

eval $($HOMEBREW shellenv)
alias brew=$HOMEBREW
alias mbrew="arch -arm64 $MHOMEBREW"

# conda
alias conda="$HOME/.miniforge3/condabin/conda"
__conda_setup="$('$HOME/.miniforge3/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
  eval "$__conda_setup"
else
  if [ -f "$HOME/.miniforge3/etc/profile.d/conda.sh" ]; then
    . "$HOME/.miniforge3/etc/profile.d/conda.sh"
  else
    export PATH="$HOME/.miniforge3/bin:$PATH"
  fi
fi
unset __conda_setup


# init
completions=(
  git
  composer
  ssh
)
aliases=(
  general
)
plugins=(
  git
  bashmarks
)


# {{{PATH
export PATH=/bin:/usr/bin:/usr/local/bin:$PATH
#export PATH=$PATH:/opt/homebrew/bin
export PATH=/usr/sbin/:$PATH
#export PATH=/opt/homebrew/opt/make/libexec/gnubin:$PATH
export PATH=$HOME/.miniforge3/bin:$PATH
export PATH=$HOME/.cargo/bin:$PATH
export PATH=$HOME/.nodebrew/current/bin:$PATH
export PATH=$HOME/.yokoscripts:$PATH

export NODEBREW_ROOT=/opt/homebrew/var/nodebrew
# }}}

# {{{alias
alias bash="/usr/local/bin/bash"
alias ..='cd ..'
alias intel="arch -x86_64" # intel brew "command"
alias rm="trash"
alias __gp=gp_set
alias bashrc="source ~/.bashrc"
alias dc="docker-compose"
alias __sp="source ~/.yokoscripts/simple_proxy.sh set"
alias __usp="source ~/.yokoscripts/simple_proxy.sh unset"

## lsの代わりにexaを使う
if [[ $(command -v exa) ]]; then
  alias e='exa --icons --git'
  alias l=e
  alias ls=e
  alias ea='exa -a --icons --git'
  alias la=ea
  alias ee='exa -aahl --icons --git'
  alias ll=ee
  alias et='exa -T -L 3 -a -I "node_modules|.git|.cache" --icons'
  alias lt=et
  alias eta='exa -T -a -I "node_modules|.git|.cache" --color=always --icons | less -r'
  alias lta=eta
  alias l='clear && ls'
fi

## catの代わりにbat
alias cat='bat'
export BAT_THEME="Visual Studio Dark+"
alias CAT='/bin/cat'
alias LS='/bin/ls'
alias vim="/usr/local/bin/vim"

## Kitty
alias kk="kitty +kitten"
alias ssh="kk ssh"

# }}}



# Starship
eval "$(starship init bash)"


# BEGIN_KITTY_SHELL_INTEGRATION
if test -n "$KITTY_INSTALLATION_DIR" -a -e "$KITTY_INSTALLATION_DIR/shell-integration/bash/kitty.bash"; then source "$KITTY_INSTALLATION_DIR/shell-integration/bash/kitty.bash"; fi
# END_KITTY_SHELL_INTEGRATION

# . "$HOME/.cargo/env"

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
