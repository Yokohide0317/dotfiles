nnoremap <Leader>c :<C-u>setlocal cursorline! cursorcolumn!<CR>
set autoindent
set smartindent
set foldmethod=marker
set foldmarker={{{,}}}

filetype off

"dein Scripts-----------------------------
if &compatible
  set nocompatible  " Be iMproved
endif

" Required:
set runtimepath+=$HOME/.cache/dein/repos/github.com/Shougo/dein.vim

" Required:
call dein#begin('$HOME/.cache/dein')

" Let dein manage dein
" Required:
call dein#add('$HOME/.cache/dein/repos/github.com/Shougo/dein.vim')

" {{{プラグインのインストール
" Add or remove your plugins here like this:
call dein#add('vim-airline/vim-airline')
call dein#add('vim-airline/vim-airline-themes')
call dein#add("cocopon/iceberg.vim")
colorscheme iceberg
" }}}

" 背景を透明に
call dein#add("miyakogi/seiya.vim")
let g:seiya_auto_enable=1
" Rustの自動整形
" call dein#add('rust-lang/rust.vim')
" let g:rustfmt_autosave = 1

" markdown用
" call dein#add('godlygeek/tabular')
" call dein#add('plasticboy/vim-markdown')
" call dein#add('previm/previm')
" let g:vim_markdown_folding_disabled = 1
" let g:previm_enable_realtime = 1
" let g:previm_open_cmd = 'open -a Brave\ Browser'

" 補完機能
"構文チェックを行う。
call dein#add('scrooloose/syntastic')
"() 色付け:
call dein#add('itchyny/lightline.vim')

" コードの自動補間(neocomplete・neosnippet・neosnippet-snippets)
if has('lua')
   "自動補間
    call dein#add('Shougo/neocomplete.vim')
    " スニペットの補完機能
    call dein#add('Shougo/neosnippet')
    " スニペット集
    call dein#add('Shougo/neosnippet-snippets')
endif

" Required:
call dein#end()

" Required:
filetype plugin indent on
syntax enable

" If you want to install not installed plugins on startup.
if dein#check_install()
  call dein#install()
endif


"End dein Scripts-------------------------




" Only open nerdtree if no file was specified on startup
function! StartUpNerdtree()
    if 0 == argc()
        NERDTree
    end
endfunction

autocmd VimEnter * call StartUpNerdtree()

"Tagbar Options
"latest version is only compatible with vim >= 701
if v:version > 700
    " Bundle 'majutsushi/tagbar'
    " Same as nerdtree, only open if no file was specified
    function! StartUpTagbar()
        if 0 == argc()
           TagbarOpen
        end
    endfunction

    autocmd VimEnter * call StartUpTagbar()
endif

"Syntastic Options
let g:syntastic_php_checkers=['php', 'phpcs', 'phpmd']

"Vim-airline Options
set noshowmode                    " -- Hide default mode indicator
set laststatus=2                  " -- Show airline even when only one split is open
let g:airline_powerline_fonts = 1 " -- Allow fancy separators
let g:airline#extensions#syntastic#enabled = 1
let g:airline_theme = 'bubblegum'

" Ctrlp Options
" Ignore files we don't want to index
set wildignore+=*/tmp/*,*.so,*.swp,*.zip     " MacOSX/Linux
set wildignore+=*.o,*.obj,.git,*.rbc,*.class,.svn
" custom starting default search folder
let g:ctrlp_map = '<c-p>'
" SuperTab options 
let g:SuperTabDefaultCompletionType = "context"
let g:SuperTabContextTextOmniPrecedence = ['&omnifunc', '&completefunc']
let g:SuperTabLongestHighlight = 2
let g:SuperTabClosePreviewOnPopupClose = 1

" Tagbar Options
let g:tagbar_show_visibility = 1
let g:tagbar_expand = 1
set nu
set showmatch matchtime=1
set expandtab
set softtabstop=4
set shiftwidth=4
set backspace=indent,eol,start
set hlsearch
syntax enable
filetype plugin on
nmap <silent> <leader>/ :nohlsearch<CR>
set nolist
set incsearch
set ignorecase
set smartcase
set noswapfile
hi Comment ctermfg=3
au! BufWritePost .vimrc so %
vmap gl :<C-U>!svn blame <C-R>=expand("%:p") <CR> \| sed -n <C-R>=line("'<") <CR>,<C-R>=line("'>") <CR>p <CR>
cmap w!! w !sudo tee %
set guioptions-=m 
:set guioptions-=T
set encoding=utf-8
scriptencoding utf-8
set wildmenu
set wildmode=list:longest
autocmd BufRead,BufNewFile *.go set filetype=go
autocmd BufRead,BufNewFile *.go set makeprg=go\ build\ %

fun! Gofix()
    let regel=line(".")
    %!$GOROOT/bin/gofmt
    call cursor(regel, 1)
endfunction

autocmd Filetype go command! Fmt call Gofix()

" Set backups
if has('persistent_undo')
  set undodir=~/.vim/tmp/undo//     " undo files
  set undofile
  set undolevels=3000
  set undoreload=10000
endif
set backupdir=~/.vim/tmp/backup// " backups
set directory=~/.vim/tmp/swap//   " swap files
set backup
set noswapfile

"set background=dark

" Make any custom changes here. If this file doesn't exists, the 
" base vimrc.custom is copied here to give you some font options
" If it already exists when you do a git pull it won't be overwritten
if filereadable(expand("~/.vim/vimrc.local"))
  source ~/.vim/vimrc.local
endif

set completeopt=menuone,noinsert
inoremap <expr><CR>  pumvisible() ? "<C-y>" : "<CR>"
inoremap <expr><C-n> pumvisible() ? "<Down>" : "<C-n>"
inoremap <expr><C-p> pumvisible() ? "<Up>" : "<C-p>"



if !exists('g:neocomplete#force_omni_input_patterns')
        let g:neocomplete#force_omni_input_patterns = {}
endif

let g:neocomplete#force_omni_input_patterns.python = '\h\w*\|[^. \t]\.\w*'

inoremap <expr><BS> neocomplete#smart_close_popup()."<C-h>"

" エンターキーで補完候補の確定. スニペットの展開もエンターキーで確定
imap <expr><CR> neosnippet#expandable() ? "<Plug>(neosnippet_expand_or_jump)" : pumvisible() ? "<C-y>" : "<CR>"
" タブキーで補完候補の選択. スニペット内のジャンプもタブキーでジャンプ
imap <expr><TAB> pumvisible() ? "<C-n>" : neosnippet#jumpable() ? "<Plug>(neosnippet_expand_or_jump)" : "<TAB>"


" カーソル
if has('vim_starting')
    " 挿入モード時に非点滅の縦棒タイプのカーソル
    let &t_SI .= "\e[6 q"
    " ノーマルモード時に非点滅のブロックタイプのカーソル
    let &t_EI .= "\e[2 q"
    " 置換モード時に非点滅の下線タイプのカーソル
    let &t_SR .= "\e[4 q"
endif

set statusline=%<%f\ %h%m%r%{kite#statusline()}%=%-14.(%l,%c%V%)\ %P
set laststatus=2  " always display the status line
